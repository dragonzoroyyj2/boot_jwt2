package com.mybaselink.app.service;

import com.mybaselink.app.entity.JwtTokenEntity;
import com.mybaselink.app.entity.LoginUserEntity;
import com.mybaselink.app.repository.LoginUserRepository;
import com.mybaselink.app.security.JwtTokenProvider;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.Instant;
import java.util.Optional;
/*
 LoginUserRepository   ‚Üê   LoginUserService   ‚Üê  CustomUserDetailsService
                                  ‚îÇ
                                  ‚ñº
                           AuthService
                             ‚îú‚îÄ JwtService (ÌÜ†ÌÅ∞ Í¥ÄÎ¶¨)
                             ‚îî‚îÄ JwtTokenProvider (JWT Î∞úÍ∏â/Í≤ÄÏ¶ù)
                                  ‚îÇ
                                  ‚ñº
                        JwtAuthenticationFilter
                                  ‚îÇ
                                  ‚ñº
                           CustomLogoutHandler
 */

/**
 * üîê AuthService (ÏµúÏã† ÌÜµÌï© Î≤ÑÏ†Ñ)
 *
 * ‚úÖ Ïó≠Ìï†:
 *  - ÏÇ¨Ïö©Ïûê Ïù∏Ï¶ù
 *  - JWT ÏÉùÏÑ± Î∞è Ï†ÄÏû• (JwtService ÏúÑÏûÑ)
 *  - Refresh, Logout, Profile Ï≤òÎ¶¨
 */
@Service
@Transactional
public class AuthService implements UserDetailsService {

    private final LoginUserRepository loginUserRepository;
    private final JwtService jwtService;            // ‚úÖ ÌÜ†ÌÅ∞ Í¥ÄÎ¶¨ Ï†ÑÎã¥
    private final JwtTokenProvider jwtTokenProvider;

    public AuthService(LoginUserRepository loginUserRepository,
                       JwtService jwtService,
                       JwtTokenProvider jwtTokenProvider) {
        this.loginUserRepository = loginUserRepository;
        this.jwtService = jwtService;
        this.jwtTokenProvider = jwtTokenProvider;
    }

    // ============================================================
    // ‚úÖ ÏÇ¨Ïö©Ïûê Ïù∏Ï¶ù Ï†ïÎ≥¥ Î°úÎìú (Spring Security ÌëúÏ§Ä)
    // ============================================================

    @Override
    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
        LoginUserEntity user = loginUserRepository.findByUsername(username)
                .orElseThrow(() -> new UsernameNotFoundException("ÏÇ¨Ïö©ÏûêÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§: " + username));

        return User.builder()
                .username(user.getUsername())
                .password(user.getPassword())
                .roles(user.getRole().replace("ROLE_", "")) // ROLE_ Ï†ëÎëêÏñ¥ Ï†úÍ±∞ ÌõÑ Îì±Î°ù
                .build();
    }

    // ============================================================
    // ‚úÖ Î°úÍ∑∏Ïù∏ Ïãú JWT Ï†ÄÏû•
    // ============================================================

    public void login(UserDetails userDetails, String token, Instant expiresAt) {
        // ‚úÖ Í∏∞Ï°¥ ÏÇ¨Ïö©Ïûê ÌÜ†ÌÅ∞ Ï†ÑÎ∂Ä ÌèêÍ∏∞ ÌõÑ ÏÉàÎ°ú Ï†ÄÏû•
        jwtService.getActiveTokens(userDetails.getUsername())
                .forEach(t -> jwtService.revokeToken(t.getToken()));

        JwtTokenEntity jwtEntity = new JwtTokenEntity();
        jwtEntity.setUsername(userDetails.getUsername());
        jwtEntity.setToken(token);
        jwtEntity.setIssuedAt(Instant.now());
        jwtEntity.setExpiresAt(expiresAt);
        jwtEntity.setRevoked(false);
        jwtService.saveToken(jwtEntity);
    }

    // ============================================================
    // ‚úÖ ÌÜ†ÌÅ∞ Í≤ÄÏ¶ù
    // ============================================================

    public boolean isTokenValid(String token) {
        if (token == null || token.isEmpty()) return false;

        Optional<JwtTokenEntity> tokenOpt = jwtService.getToken(token);
        if (tokenOpt.isEmpty()) return false;

        JwtTokenEntity dbToken = tokenOpt.get();
        boolean expired = dbToken.getExpiresAt() != null && dbToken.getExpiresAt().isBefore(Instant.now());
        boolean revoked = dbToken.isRevoked();

        return !expired && !revoked && jwtTokenProvider.validateToken(token);
    }

    // ============================================================
    // ‚úÖ ÌÜ†ÌÅ∞ Í∞±Ïã†
    // ============================================================

    public void refreshToken(String oldToken, String newToken, Instant newExpiresAt) {
        jwtService.revokeToken(oldToken);

        String username = jwtTokenProvider.getUsername(oldToken);

        JwtTokenEntity newEntity = new JwtTokenEntity();
        newEntity.setUsername(username);
        newEntity.setToken(newToken);
        newEntity.setIssuedAt(Instant.now());
        newEntity.setExpiresAt(newExpiresAt);
        newEntity.setRevoked(false);

        jwtService.saveToken(newEntity);
    }

    // ============================================================
    // ‚úÖ ÌòÑÏû¨ Î°úÍ∑∏Ïù∏Îêú ÏÇ¨Ïö©Ïûê Ï°∞Ìöå (/auth/me)
    // ============================================================

    public Optional<LoginUserEntity> getCurrentUser(String username) {
        return loginUserRepository.findByUsername(username);
    }
}
